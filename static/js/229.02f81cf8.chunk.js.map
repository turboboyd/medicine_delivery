{"version":3,"file":"static/js/229.02f81cf8.chunk.js","mappings":"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","sources":["components/CartForm/InputField.jsx","components/CartForm/CartForm.jsx","components/OrderSummary.js","components/CartProductCard/CartProductCard.jsx","pages/CartPage.jsx"],"sourcesContent":["import PropTypes from \"prop-types\"; \nimport { Field, ErrorMessage } from \"formik\";\n\nconst InputField = ({ label, name, type, placeholder }) => (\n  <label className=\"block\">\n    {label}:\n    <Field\n      type={type}\n      name={name}\n      placeholder={placeholder}\n      className=\"mt-1 p-2 border border-gray-300 rounded w-full\"\n    />\n    <ErrorMessage\n      name={name}\n      component=\"div\"\n      className=\"text-red-500 text-sm\"\n    />\n  </label>\n);\n\nInputField.propTypes = {\n  label: PropTypes.string.isRequired,\n  name: PropTypes.string.isRequired, \n  type: PropTypes.string.isRequired, \n  placeholder: PropTypes.string,\n};\n\nexport default InputField;\n","import { Formik, Form } from \"formik\";\nimport * as Yup from \"yup\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { placeOrder } from \"../../redux/cart/cartReducer\";\nimport { useNavigate } from \"react-router-dom\";\nimport InputField from \"./InputField\";\nimport PropTypes from \"prop-types\";\n\nconst validationSchema = Yup.object().shape({\n  address: Yup.string().required(\"Address is required\"),\n  email: Yup.string().email(\"Invalid email\").required(\"Email is required\"),\n  phoneNumber: Yup.string()\n    .matches(/^[0-9]+$/, \"Only digits allowed\")\n    .required(\"Phone number is required\"),\n  name: Yup.string().required(\"Name is required\"),\n});\n\nconst CartForm = ({ formRef }) => {\n  const dispatch = useDispatch();\n  const cartItems = useSelector((state) => state.cart.cart);\n\n  const navigate = useNavigate();\n\n  const handleSubmit = (values) => {\n    const orderData = {\n      ...values,\n      medicines: cartItems.map(({ medicineId, storeId, quantity }) => ({\n        medicineId,\n        storeId,\n        quantity,\n      })),\n    };\n\n    dispatch(placeOrder(orderData))\n      .unwrap()\n      .then(() => {\n        navigate(\"/success\");\n      })\n      .catch((error) => {\n        console.error(\"Order placement failed:\", error);\n      });\n  };\n\n  return (\n    <div className=\" w-1/2 overflow-auto max-h-screen px-4 py-4 border rounded-lg\">\n      <Formik\n        innerRef={formRef}\n        initialValues={{\n          address: \"\",\n          email: \"\",\n          phoneNumber: \"\",\n          name: \"\",\n        }}\n        validationSchema={validationSchema}\n        onSubmit={handleSubmit}\n      >\n        {({ isSubmitting }) => (\n          <Form className=\"flex flex-col gap-4\">\n            <InputField\n              label=\"Name\"\n              name=\"name\"\n              type=\"text\"\n              placeholder=\"Name\"\n            />\n            <InputField\n              label=\"Email\"\n              name=\"email\"\n              type=\"email\"\n              placeholder=\"Email\"\n            />\n            <InputField\n              label=\"Phone\"\n              name=\"phoneNumber\"\n              type=\"text\"\n              placeholder=\"Phone\"\n            />\n            <InputField\n              label=\"Address\"\n              name=\"address\"\n              type=\"text\"\n              placeholder=\"Address\"\n            />\n          </Form>\n        )}\n      </Formik>\n    </div>\n  );\n};\n\nexport default CartForm;\n\nCartForm.propTypes = {\n  formRef: PropTypes.oneOfType([\n    PropTypes.func,\n    PropTypes.shape({ current: PropTypes.instanceOf(Element) }),\n  ]),\n};\n","import React from \"react\";\nimport { useSelector } from \"react-redux\";\n\nconst OrderSummary = ({ submitForm }) => {\n  const cart = useSelector((state) => state.cart.cart);\n  const total = cart.reduce((sum, item) => sum + item.quantity * item.price, 0);\n  return (\n    <div>\n      <p> Order summary : {total}</p>\n      <button\n        type=\"button\"\n        onClick={submitForm}\n        className=\"w-32 bg-blue-500 text-white p-2 rounded hover:bg-blue-600 disabled:opacity-50 mt-4\"\n      >\n        Submit\n      </button>\n    </div>\n  );\n};\n\nexport default OrderSummary;\n","import React, { useCallback } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { removeFromCart, updateCartItem } from \"../../redux/cart/cartReducer\";\n\nconst CartProductCard = () => {\n  const dispatch = useDispatch();\n  const cart = useSelector((state) => state.cart.cart);\n\n  const handleIncrement = useCallback(\n    (medicineId, storeId, quantity) => {\n      dispatch(\n        updateCartItem({\n          medicineId,\n          storeId,\n          quantity: quantity + 1,\n        })\n      );\n    },\n    [dispatch]\n  );\n\n  const handleDecrement = useCallback(\n    (medicineId, storeId, quantity) => {\n      if (quantity > 1) {\n        dispatch(\n          updateCartItem({\n            medicineId,\n            storeId,\n            quantity: quantity - 1,\n          })\n        );\n      } else {\n        dispatch(removeFromCart({ medicineId, storeId }));\n      }\n    },\n    [dispatch]\n  );\n\n  return (\n    <div className=\"  w-1/2 overflow-auto px-4 py-4 border rounded-lg\">\n      <ul className=\"flex flex-col gap-4\">\n        {cart.map((product, i) => (\n          <li key={i} className=\"p-4 flex gap-4 border rounded-lg\">\n            <div className=\"w-1/2 h-28 bg-gray-300\">\n              <img\n                src={product.image}\n                alt={product.name}\n                className=\"h-48 w-full object-cover\"\n              />\n            </div>\n            <div className=\"flex flex-col justify-between\">\n              <div className=\"font-bold\">{product.name}</div>\n              <div>Price: {product.price}$</div>\n              <div className=\"flex items-center gap-2\">\n                <button\n                  aria-label=\"Decrease quantity\"\n                  className=\"px-3 py-1 border border-red-500 rounded bg-red-500 hover:bg-red-600\"\n                  onClick={() =>\n                    handleDecrement(\n                      product.medicineId,\n                      product.storeId,\n                      product.quantity\n                    )\n                  }\n                >\n                  âˆ’\n                </button>\n                <input\n                  className=\"w-12 text-center border rounded cursor-default\"\n                  type=\"number\"\n                  value={product.quantity}\n                  readOnly\n                />\n                <button\n                  aria-label=\"Increase quantity\"\n                  className=\"px-3 py-1 border border-green-500 rounded bg-green-500 hover:bg-green-600\"\n                  onClick={() =>\n                    handleIncrement(\n                      product.medicineId,\n                      product.storeId,\n                      product.quantity\n                    )\n                  }\n                >\n                  +\n                </button>\n              </div>\n            </div>\n          </li>\n        ))}\n      </ul>\n    </div>\n  );\n};\n\nexport default CartProductCard;\n","import React, { useRef } from \"react\";\nimport CartForm from \"../components/CartForm/CartForm\";\nimport OrderSummary from \"../components/OrderSummary\";\nimport CartProductCard from \"components/CartProductCard/CartProductCard\";\n\nconst CartPage = () => {\n  const formRef = useRef(null);\n  const submitForm = () => {\n    if (formRef.current) {\n      formRef.current.handleSubmit();\n    }\n  };\n  return (\n    <div className=\"container mx-auto px-4 max-h-[80vh]\">\n      <div className=\"flex gap-8 max-h-[75vh]\">\n        <CartForm formRef={formRef} />\n        <CartProductCard />\n      </div>\n      <OrderSummary submitForm={submitForm} />\n    </div>\n  );\n};\n\nexport default CartPage;\n"],"names":["_ref","label","name","type","placeholder","_jsxs","className","children","_jsx","Field","ErrorMessage","component","validationSchema","Yup","shape","address","required","email","phoneNumber","matches","formRef","dispatch","useDispatch","cartItems","useSelector","state","cart","navigate","useNavigate","Formik","innerRef","initialValues","onSubmit","values","orderData","medicines","map","_ref2","medicineId","storeId","quantity","placeOrder","unwrap","then","catch","error","console","_ref3","isSubmitting","Form","InputField","submitForm","total","reduce","sum","item","price","onClick","CartProductCard","handleIncrement","useCallback","updateCartItem","handleDecrement","removeFromCart","product","i","src","image","alt","value","readOnly","CartPage","useRef","CartForm","OrderSummary","current","handleSubmit"],"sourceRoot":""}